// <auto-generated />
using System;
using CropIdService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CropIdService.Migrations
{
    [DbContext(typeof(CropIdDbContext))]
    partial class CropIdDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CropIdService.Models.Entities.IdEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageBase64Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPlant")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("IdEntries");
                });

            modelBuilder.Entity("CropIdService.Models.Entities.SuggestionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdEntryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Probability")
                        .HasColumnType("double precision");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdEntryId");

                    b.ToTable("SuggestionEntries");
                });

            modelBuilder.Entity("CropIdService.Models.Entities.SuggestionEntry", b =>
                {
                    b.HasOne("CropIdService.Models.Entities.IdEntry", "IdEntry")
                        .WithMany("Suggestions")
                        .HasForeignKey("IdEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdEntry");
                });

            modelBuilder.Entity("CropIdService.Models.Entities.IdEntry", b =>
                {
                    b.Navigation("Suggestions");
                });
#pragma warning restore 612, 618
        }
    }
}
