// <auto-generated />
using System;
using FarmerTasksService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FarmerTasksService.Migrations
{
    [DbContext(typeof(FarmerTaskDbContext))]
    [Migration("20250403103714_AddedCropId")]
    partial class AddedCropId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskAssignment", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TaskCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba84a42e-b766-4778-bbae-94429ffcd66c"),
                            Name = "Planting"
                        },
                        new
                        {
                            Id = new Guid("e41ec2cb-6567-434c-b079-7d5d13e8d194"),
                            Name = "Harvesting"
                        },
                        new
                        {
                            Id = new Guid("6d57eb9f-c3d0-4fbe-8f35-a7fb5c906b91"),
                            Name = "Maintenance"
                        },
                        new
                        {
                            Id = new Guid("d332a3b8-af4d-460e-8c35-a6acfd2d71c8"),
                            Name = "Irrigation"
                        },
                        new
                        {
                            Id = new Guid("b01abce0-1604-483b-8c7d-ffc8de5c459e"),
                            Name = "Pest and Disease Control"
                        },
                        new
                        {
                            Id = new Guid("d64372d4-a7de-4b3b-a3c1-ba5edec17bc1"),
                            Name = "Fertilization"
                        });
                });

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskComments");
                });

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CropId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastGeneratedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Recurrence")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskAssignment", b =>
                {
                    b.HasOne("FarmerTasksService.Models.Entities.TaskItem", "Task")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskComment", b =>
                {
                    b.HasOne("FarmerTasksService.Models.Entities.TaskItem", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskItem", b =>
                {
                    b.HasOne("FarmerTasksService.Models.Entities.TaskCategory", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskCategory", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("FarmerTasksService.Models.Entities.TaskItem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TaskAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
