// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlantedCropsService.Data;

#nullable disable

namespace PlantedCropsService.Migrations
{
    [DbContext(typeof(CropsDbContext))]
    [Migration("20250409101548_AddedColumns")]
    partial class AddedColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FertilizerEventNote", b =>
                {
                    b.Property<Guid>("FertilizerEventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotesId")
                        .HasColumnType("uuid");

                    b.HasKey("FertilizerEventsId", "NotesId");

                    b.HasIndex("NotesId");

                    b.ToTable("FertilizerEventNote", (string)null);
                });

            modelBuilder.Entity("GrowthStageEventNote", b =>
                {
                    b.Property<Guid>("GrowthStageEventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotesId")
                        .HasColumnType("uuid");

                    b.HasKey("GrowthStageEventsId", "NotesId");

                    b.HasIndex("NotesId");

                    b.ToTable("GrowthStageEventNote", (string)null);
                });

            modelBuilder.Entity("HealthStatusEventNote", b =>
                {
                    b.Property<Guid>("HealthStatusEventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotesId")
                        .HasColumnType("uuid");

                    b.HasKey("HealthStatusEventsId", "NotesId");

                    b.HasIndex("NotesId");

                    b.ToTable("HealthStatusEventNote", (string)null);
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.Crop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<string>("BinomialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CropCatalogId")
                        .HasColumnType("uuid");

                    b.Property<string>("CultivatedVariety")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ExpectedFirstHarvestDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExpectedFirstHarvestEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExpectedFirstHarvestStartDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExpectedLastHarvestDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExpectedLastHarvestEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExpectedLastHarvestStartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Perennial")
                        .HasColumnType("boolean");

                    b.Property<Polygon>("Surface")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.FertilizerEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ApplicationDate")
                        .HasColumnType("date");

                    b.Property<string>("ApplicationMethod")
                        .HasColumnType("text");

                    b.Property<Guid>("AppliedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("AppliedByUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CropId")
                        .HasColumnType("uuid");

                    b.Property<string>("EquipmentUsed")
                        .HasColumnType("text");

                    b.Property<string>("FertilizerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("QuantityApplied")
                        .HasColumnType("double precision");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.ToTable("FertilizerEvents");
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.GrowthStageEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CropId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecordedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecordedByUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.ToTable("GrowthStageEvents");
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.HealthStatusEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CropId")
                        .HasColumnType("uuid");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PestOrDisease")
                        .HasColumnType("text");

                    b.Property<Guid>("RecordedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecordedByUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeverityLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TreatmentApplied")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.ToTable("HealthStatusEvents");
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("FertilizerEventNote", b =>
                {
                    b.HasOne("PlantedCropsService.Models.Entities.FertilizerEvent", null)
                        .WithMany()
                        .HasForeignKey("FertilizerEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantedCropsService.Models.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrowthStageEventNote", b =>
                {
                    b.HasOne("PlantedCropsService.Models.Entities.GrowthStageEvent", null)
                        .WithMany()
                        .HasForeignKey("GrowthStageEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantedCropsService.Models.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthStatusEventNote", b =>
                {
                    b.HasOne("PlantedCropsService.Models.Entities.HealthStatusEvent", null)
                        .WithMany()
                        .HasForeignKey("HealthStatusEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantedCropsService.Models.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.FertilizerEvent", b =>
                {
                    b.HasOne("PlantedCropsService.Models.Entities.Crop", "Crop")
                        .WithMany("FertilizerEvents")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.GrowthStageEvent", b =>
                {
                    b.HasOne("PlantedCropsService.Models.Entities.Crop", "Crop")
                        .WithMany("GrowthStageEvents")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.HealthStatusEvent", b =>
                {
                    b.HasOne("PlantedCropsService.Models.Entities.Crop", "Crop")
                        .WithMany("HealthStatusEvents")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("PlantedCropsService.Models.Entities.Crop", b =>
                {
                    b.Navigation("FertilizerEvents");

                    b.Navigation("GrowthStageEvents");

                    b.Navigation("HealthStatusEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
